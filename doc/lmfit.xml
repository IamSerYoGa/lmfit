<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<refentry lang="en">
<refmeta>
<refentrytitle>lmfit</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>
<refnamediv>
    <refname>lmfit</refname>
    <refpurpose>Levenberg-Marquardt minimization and curve fitting</refpurpose>
</refnamediv>
<refsynopsisdiv>
<simpara><literal><emphasis role="strong">#include &lt;lmmin.h&gt;</emphasis></literal></simpara>
<simpara><literal>void <emphasis role="strong">lm_minimize</emphasis> (int m_dat, int n_par, double *par, void (*evaluate) (double *par, int m_dat, double *fvec, void *data, int *info), void (*printout) (int n_par, double *par, int m_dat, double *fvec, void *data, int iflag, int iter, int nfev), void *data, lm_control_type *control);</literal></simpara>
<simpara>where</simpara>
<simpara><literal>typedef struct { double ftol; double xtol; double gtol; double epsilon; double stepbound; double fnorm; int maxcall; int nfev; int info; } <emphasis role="strong">lm_control_type</emphasis>;</literal></simpara>
<simpara>Defaults for curve fitting:</simpara>
<simpara><literal>void <emphasis role="strong">lm_initialize_control</emphasis> (lm_control_type *control);</literal></simpara>
<simpara><literal>typedef struct { double *tvec; double *yvec; double (*f) (double t, double *par); } <emphasis role="strong">lm_data_type_default</emphasis>;</literal></simpara>
<simpara><literal>void <emphasis role="strong">lm_evaluate_default</emphasis> (double *par, int m_dat, double *fvec, void *data, int *info);</literal></simpara>
<simpara><literal>void <emphasis role="strong">lm_print_default</emphasis> (int n_par, double *par, int m_dat, double *fvec, void *data, int iflag, int iter, int nfev);</literal></simpara>
<simpara>Status messages (indexed by <literal>control.info</literal>):</simpara>
<simpara><literal>extern const char *lm_infmsg[];</literal></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Determine a parameter vector <literal>par</literal> (of dimension <literal>n_par</literal>) that minimizes
a norm (usually the sum of squares) of a vector <literal>fvec</literal>
(of dimension <literal>m_dat</literal> ≥ <literal>n_par</literal>).</simpara>
<simpara>The most important application is curve fitting: to approximate data y(t) by a function f(t;p), one minimizes the norm of the residual vector v = y(t) – f(t;p).</simpara>
<simpara>The Levenberg-Marquardt minimization starts with a steepest-descent exploration of the parameter space, and achieves rapid convergence by crossing over into the Newton-Gauss method.</simpara>
<simpara>The minimization routine <literal>lm_minimize</literal> requires the following parameters:</simpara>
<variablelist>
<varlistentry>
<term>
<literal>m_dat</literal> 
</term>
<listitem>
<simpara>
dimension of residue vector <literal>fvec</literal> (in curve fitting equal to dimension of data vector <literal>yvec</literal>);
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>n_par</literal> 
</term>
<listitem>
<simpara>
dimension of parameter vector <literal>par</literal>;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>par</literal> 
</term>
<listitem>
<simpara>
parameter vector, will be changed: on input, it must contain a reasonable guess; on output, it contains the solution found to minimize ||<literal>fvec</literal>||;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>evaluate</literal> 
</term>
<listitem>
<simpara>
a routine that calculates the residue vector <literal>fvec</literal> for given parameter vector <literal>par</literal>; setting <literal>*info</literal> to a negative value causes <literal>lm_minimize</literal> to terminate;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>printout</literal> 
</term>
<listitem>
<simpara>
a routine that can be used to inform about the progress of the minimization (<literal>iflag</literal>: location of call within <literal>lm_minimize</literal>, <literal>iter</literal>: outer loop counter, <literal>nfev</literal>: number of calls to <literal>evaluate</literal>);
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>data</literal> 
</term>
<listitem>
<simpara>
<literal>lm_minimize</literal> does not care about this pointer; it just forwards it to <literal>evaluate</literal> and <literal>printout</literal>; in curve fitting it is used to hold the data to be fitted;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>control</literal> 
</term>
<listitem>
<simpara>
a record holding parameters that control the fit algorithm, as described in file <literal>lmmin.h</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>For least-squares fitting of a data set y(t) by a function f(t;p), default implementations of <literal>evaluate</literal> and <literal>printout</literal> and a default setting of <literal>control</literal> are provided. Proceed as follows:</simpara>
<simpara>Declare and implement model function</simpara>
<simpara><literal>double f (double t, double *par)
{
 /* &#8230; */
}</literal></simpara>
<simpara>Declare</simpara>
<simpara><literal>lm_control_type control;</literal></simpara>
<simpara><literal>lm_data_type_default data;</literal></simpara>
<simpara><literal>int m_dat, n_par;</literal></simpara>
<simpara><literal>double par[/*maximum number of parameters*/];</literal></simpara>
<simpara><literal>double t[/*maximum number of data points*/], y[/*dito*/];</literal></simpara>
<simpara>Let</simpara>
<simpara><literal>m_dat  = /\* number of empirical data pairs \*/;</literal></simpara>
<simpara><literal>n_par  = /\* number of parameter values used in model \*/</literal></simpara>
<simpara><literal>data.tvec = /\* points where data have been taken \*/;</literal></simpara>
<simpara><literal>data.yvec = /\* empirical data \*/;</literal></simpara>
<simpara><literal>data.f = f;</literal></simpara>
<simpara><literal>par = /\* starting values \*/;</literal></simpara>
<simpara>Initialize control parameters:</simpara>
<simpara><literal>lm_initialize_control( &amp;control );</literal></simpara>
<simpara>Call minimization:</simpara>
<simpara><literal>lm_minimize (m_dat, n_par, par, lm_evaluate_default, lm_print_default, &amp;data, &amp;control );</literal></simpara>
<simpara>Print <literal>lm_infmsg[control.info]</literal> to inform about convergence</simpara>
</refsect1>
<refsect1 id="_ressources">
<title>RESSOURCES</title>
<simpara>lmfit is ready for use with C or C++ code. The implementation is self-contained; it does not require external libraries.</simpara>
<simpara>Main web site: <ulink url="http://www.messen-und-deuten.de/lmfit/">http://www.messen-und-deuten.de/lmfit/</ulink></simpara>
<simpara>Download location: <ulink url="http://www.messen-und-deuten.de/lmfit/src/">http://www.messen-und-deuten.de/lmfit/src/</ulink> (old download location at sourceforge.net no longer maintained - too much advertisment there, too slow, too complicated)</simpara>
<simpara>Development snapshot: <ulink url="http://iffwww.iff.kfa-juelich.de/~wuttke/lmfit.git/">http://iffwww.iff.kfa-juelich.de/~wuttke/lmfit.git/</ulink></simpara>
</refsect1>
<refsect1 id="_faq">
<title>FAQ</title>
<simpara><emphasis role="strong">Is it possible to impose constraints on the fit parameters (like p0&gt;=0 or -10&lt;p1&lt;10) ?</emphasis></simpara>
<simpara>There is no mechanism to impose constraints within
the Levenberg-Marquardt algorithm.</simpara>
<simpara>According to my experience, no such mechanism is needed.
Constraints can be imposed by variable transform [in
the above examples: use p0\^2 and 10\*tanh(p1) instead of p0 and p1]
or by adding a penalty to the sum of squares.</simpara>
<simpara>If you think your problem cannot be handled in such a way,
I would be interested to learn why. Please send me
one data set
(plain ASCII, two columns, blank separated) along
with the fit function and a brief explanation of
the application context.</simpara>
<simpara><emphasis role="strong">Is there a way to obtain error estimates for fit parameters ?</emphasis></simpara>
<simpara>The problem is only well posed if the covariance matrix
of the input data is known.
In this case,
the error propagation towards the output parameters
can be calculated in linear approximation
(<ulink url="http://en.wikipedia.org/wiki/Linear_least_squares">http://en.wikipedia.org/wiki/Linear_least_squares</ulink>).
Note that fit parameters are correlated with each other
even if the input covariance matrix is diagonal.</simpara>
<simpara>In linear approximation, the output covariance matrix
depends mainly on the Jacobian of the fit function
(evaluated for all data points) versus the fit parameters
(at their optimum values).
It seems not advisable to use the Jacobian fjac
that is calculated in the beginning of the main iteration in
lm_lmdif(), as it is only returned
after some transformations.</simpara>
<simpara>I would be glad to include code for the calculation of
parameter covariances in this distribution;
contributions would be highly welcome.</simpara>
<simpara><emphasis role="strong">How should I cite lmfit in scientific publications ?</emphasis></simpara>
<simpara>If fit results are robust, it does not matter
by which implementation they have been obtained.
If the results are not robust,
they should not be published anyway.
Therefore,
in publishing fit results obtained with lmfit
it is generally not necessary to cite the software.</simpara>
<simpara>However, in methodological publications
that describe software and data analysis procedures
based on lmfit, it might be appropriate
to provide a reference.
The preferred form of citation is:</simpara>
<simpara>Joachim Wuttke: lmfit --- a C/C++ routine for Levenberg-Marquardt minimization with wrapper for least-squares curve fitting, based on work by B. S. Garbow, K. E. Hillstrom, J. J. More, and S. Moshier. Version &lt;..&gt;, retrieved on &lt;..&gt; from <ulink url="http://www.messen-und-deuten.de/lmfit/">http://www.messen-und-deuten.de/lmfit/</ulink>.</simpara>
</refsect1>
<refsect1 id="_bugs">
<title>BUGS</title>
<simpara>This documentation is freshly rewritten. It is highly likely that it contains errors. Help is welcome.</simpara>
<simpara>This documentation is written with asciidoc, which is hopelessly flawed. Nice output, but brain-damaged mark-up. I would be grateful for recommendations: which other tool should I use to convert ascii to HTML and to POD man pages ?</simpara>
<simpara>The source code of this man page is part of the distribution. However, a compiled version in POD man page format should also be distributed, and by default it should install to /usr/local/share/man. To implement this, help is needed.</simpara>
</refsect1>
<refsect1 id="_author">
<title>AUTHOR</title>
<simpara>This implementation is based on lmdif and other routines from the
public-domain library netlib::minpack, Argonne National Laboratories,
March 1980, by Burton S. Garbow, Kenneth E. Hillstrom, Jorge J. More.
C translation by Steve Moshier.
Code revised, made C++-compatible, and wrapped by
Joachim Wuttke 2004- &lt;<ulink url="mailto:j.wuttke@fz-juelich.de">j.wuttke@fz-juelich.de</ulink>&gt;.</simpara>
</refsect1>
<refsect1 id="_copying">
<title>COPYING</title>
<simpara>Documentation: Copyright &#169; 2009 Joachim Wuttke.</simpara>
<simpara>Software: Public Domain.</simpara>
</refsect1>
</refentry>
