.\"     Title: lmfit
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 02/04/2010
.\"    Manual: 
.\"    Source: 
.\"
.TH "LMFIT" "3" "02/04/2010" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
lmfit \- Levenberg-Marquardt minimization and curve fitting
.SH "SYNOPSIS"
\fB#include <lmmin\&.h>\fR
.sp
void \fBlm_minimize\fR (int m_dat, int n_par, double *par, void (*evaluate) (double *par, int m_dat, double *fvec, void *data, int *info), void (*printout) (int n_par, double *par, int m_dat, double *fvec, void *data, int iflag, int iter, int nfev), void *data, lm_control_type *control);
.sp
where
.sp
typedef struct { double ftol; double xtol; double gtol; double epsilon; double stepbound; double fnorm; int maxcall; int nfev; int info; } \fBlm_control_type\fR;
.sp
Defaults for curve fitting:
.sp
void \fBlm_initialize_control\fR (lm_control_type *control);
.sp
typedef struct { double *tvec; double *yvec; double (*f) (double t, double *par); } *lm_data_type_default*;
.sp
void \fBlm_evaluate_default\fR (double *par, int m_dat, double *fvec, void *data, int *info);
.sp
void \fBlm_print_default\fR (int n_par, double *par, int m_dat, double *fvec, void *data, int iflag, int iter, int nfev);
.sp
Status messages (indexed by control\&.info):
.sp
extern const char *lm_infmsg[];
.sp
.SH "DESCRIPTION"
Determine a parameter vector par (of dimension n_par) that minimizes a norm (usually the sum of squares) of a vector fvec (of dimension m_dat â‰¥ n_par)\&.
.sp
The most important application is curve fitting: to approximate data y(t) by a function f(t;p), one minimizes the norm of the residual vector v = y(t) \(en f(t;p)\&.
.sp
The Levenberg\-Marquardt minimization starts with a steepest\-descent exploration of the parameter space, and achieves rapid convergence by crossing over into the Newton\-Gauss method\&.
.sp
The minimization routine lm_minimize requires the following parameters:
.sp
m_dat :: dimension of residue vector fvec (in curve fitting equal to dimension of data vector yvec); n_par :: dimension of parameter vector par; par :: parameter vector, will be changed: on input, it must contain a reasonable guess; on output, it contains the solution found to minimize ||fvec||; evaluate :: a routine that calculates the residue vector fvec for given parameter vector par; setting *info to a negative value causes lm_minimize to terminate; printout :: a routine that can be used to inform about the progress of the minimization (iflag: location of call within lm_minimize, iter: outer loop counter, nfev: number of calls to evaluate); data :: lm_minimize does not care about this pointer; it just forwards it to evaluate and printout; in curve fitting it is used to hold the data to be fitted; control :: a record holding parameters that control the fit algorithm, as described in file lmmin\&.h\&.
.sp
For least\-squares fitting of a data set y(t) by a function f(t;p), default implementations of evaluate and printout and a default setting of control are provided\&. Proceed as follows:
.sp
Declare and implement model function
.sp
double f (double t, double *par) { /* \&... */ }
.sp
Declare
.sp
lm_control_type control;
.sp
lm_data_type_default data;
.sp
int m_dat, n_par;
.sp
double par[/*maximum number of parameters*/];
.sp
double t[/*maximum number of data points*/], y[/*dito*/];
.sp
Let
.sp
m_dat = /* number of empirical data pairs */;
.sp
n_par = /* number of parameter values used in model */
.sp
data\&.tvec = /* points where data have been taken */;
.sp
data\&.yvec = /* empirical data */;
.sp
data\&.f = f;
.sp
par = /* starting values */;
.sp
Initialize control parameters:
.sp
lm_initialize_control( &control );
.sp
Call minimization:
.sp
lm_minimize (m_dat, n_par, par, lm_evaluate_default, lm_print_default, &data, &control );
.sp
Print lm_infmsg[control\&.info] to inform about convergence
.sp
.SH "RESSOURCES"
lmfit is ready for use with C or C++ code\&. The implementation is self\-contained; it does not require external libraries\&.
.sp
Main web site: http://www\&.messen\-und\-deuten\&.de/lmfit/
.sp
Download location: http://www\&.messen\-und\-deuten\&.de/lmfit/src/
.sp
The old download location at sourceforge\&.net is no longer maintained (too much advertising there, too slow, too complicated)
.sp
.SH "FAQ"
\fBIs it possible to impose constraints on the fit parameters (like p0>=0 or \-10<p1<10) ?\fR
.sp
There is no mechanism to impose constraints within the Levenberg\-Marquardt algorithm\&.
.sp
According to my experience, no such mechanism is needed\&. Constraints can be imposed by variable transform [in the above examples: use p0^2 and 10*tanh(p1) instead of p0 and p1] or by adding a penalty to the sum of squares\&.
.sp
If you think your problem cannot be handled in such a way, I would be interested to learn why\&. Please send me one data set (plain ASCII, two columns, blank separated) along with the fit function and a brief explanation of the application context\&.
.sp
\fBIs there a way to obtain error estimates for fit parameters ?\fR
.sp
The problem is only well posed if the covariance matrix of the input data is known\&. In this case, the error propagation towards the output parameters can be calculated in linear approximation (http://en\&.wikipedia\&.org/wiki/Linear_least_squares)\&. Note that fit parameters are correlated with each other even if the input covariance matrix is diagonal\&.
.sp
In linear approximation, the output covariance matrix depends mainly on the Jacobian of the fit function (evaluated for all data points) versus the fit parameters (at their optimum values)\&. It seems not advisable to use the Jacobian fjac that is calculated in the beginning of the main iteration in lm_lmdif(), as it is only returned after some transformations\&.
.sp
I would be glad to include code for the calculation of parameter covariances in this distribution; contributions would be highly welcome\&.
.sp
\fBHow should I cite lmfit in scientific publications ?\fR
.sp
If fit results are robust, it does not matter by which implementation they have been obtained\&. If the results are not robust, they should not be published anyway\&. Therefore, in publishing fit results obtained with lmfit it is generally not necessary to cite the software\&.
.sp
However, in methodological publications that describe software and data analysis procedures based on lmfit, it might be appropriate to provide a reference\&. The preferred form of citation is:
.sp
Joachim Wuttke: lmfit \-\-\- a C/C++ routine for Levenberg\-Marquardt minimization with wrapper for least\-squares curve fitting, based on work by B\&. S\&. Garbow, K\&. E\&. Hillstrom, J\&. J\&. More, and S\&. Moshier\&. Version <\&.\&.>, retrieved on <\&.\&.> from http://www\&.messen\-und\-deuten\&.de/lmfit/\&.
.sp
.SH "BUGS"
This documentation is written with asciidoc, which is hopelessly flawed\&. Nice output, but brain\-damaged mark\-up\&. I would be grateful for recommendations: which other tool should I use to convert ascii to HTML and to POD man pages ?
.sp
The source code of this man page is part of the distribution\&. However, a compiled version in POD man page format should also be distributed, and by default it should install to /usr/local/share/man\&. To implement this, help is needed\&.
.sp
.SH "AUTHOR"
This implementation is based on lmdif and other routines from the public\-domain library netlib::minpack, Argonne National Laboratories, March 1980, by Burton S\&. Garbow, Kenneth E\&. Hillstrom, Jorge J\&. More\&. C translation by Steve Moshier\&. Code revised, made C++\-compatible, and wrapped by Joachim Wuttke 2004\- <j\&.wuttke@fz\-juelich\&.de>\&.
.sp
.SH "COPYING"
Documentation: Copyright \(co 2009 Joachim Wuttke\&.
.sp
Software: Public Domain\&.
.sp
.SH "NOTES"
.IP " 1." 4
j.wuttke@fz-juelich.de
.RS 4
\%mailto:j.wuttke@fz-juelich.de
.RE
