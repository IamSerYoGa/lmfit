Hi,

I'm using modified code of the lmfit library to perform nonlinear 
fitting. The main difference of the modified code is that I allow a user 
to specify, in addition to "evaluate" function, function which can 
evaluate Jacobian from an explicit formula instead of computing it by a 
forward-difference approximation.

I would like to ask you how the lmfit algorithm deals with non-regular 
Jacobian (i.e. when it's not of a full rank)? In lines 791-792 there is 
a comment about this situation:

/*** lmpar: compute and store in x the gauss-newton direction. if the
      jacobian is rank-deficient, obtain a least squares solution. ***/

However code used to calculate Jacobian's rank uses strict equality test 
(r[j * ldr + j] == 0), which due to numerical errors, is rarely true. 
Were you considering some kind of regularisation of the problem, for 
example changing this equality to some epsilon-like comparison test? 
 From my simple tests, it seems that it could give much better results 
in this particular situation.
For example, octave's "pinv" function which computes Moore-Penrose 
pseudoinverse (which is bad-posed for non-regular matrices), uses 
tolerance parameter tol to regularise the matrix (see f.e. 
http://www.gnu.org/software/octave/doc/interpreter/Basic-Matrix-Functions.html#index-pinv-1844 
).


Also, shouldn't there be 0.5 instead of 0.55 in line 626 in lmmin.c?

             if (ratio <= 0.25) {
                 if (actred >= 0.)
                     temp = 0.5;
                 else
626:                temp = 0.5 * dirder / (dirder + 0.55 * actred);
                 if (p1 * fnorm1 >= fnorm || temp < p1)
                     temp = p1;
                 delta = temp * MIN(delta, pnorm / p1);
                 par /= temp;
             } else if (par == 0. || ratio >= 0.75) {
                 delta = pnorm / 0.5;
                 par *= 0.5;
             }

Thank you in advance for your answer!

Best wishes,
Marcin
marcin.kardas@medicwave.com
